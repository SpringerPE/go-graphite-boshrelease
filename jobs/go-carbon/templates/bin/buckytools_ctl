#!/usr/bin/env bash

set -e # exit immediately if a simple command exits with a non-zero status
set -u # report the usage of uninitialized variables

# Load job properties
source /var/vcap/jobs/go-carbon/data/properties.sh

# Setup env vars and folders for the ctl script
source /var/vcap/jobs/go-carbon/packages/buckytools/helpers/setup.sh "go-carbon" "buckytools"

# Load function lib (alway before setup, there are some global variables needed)
source /var/vcap/jobs/go-carbon/packages/buckytools/helpers/lib.sh

#we need to extract information about the carbon-c-relay clusters from the carbon-c-relay links
#and about the go-carbon instances from the go-carbon link 
<%
carbon_link = link('carbon-c-relay')
go_carbon_link = link("go-carbon")
clusters = carbon_link.p('carbon-c-relay.clusters')

#find which cluster this instance should belong to
current_cluster = clusters.find {|cluster| cluster['azs'].include? spec.az}
lb = current_cluster['lb']
replication = current_cluster['replication']
cluster_name = current_cluster['name']

nodes = []
#Force the ordering of the instance list by instance index key
instances = go_carbon_link.instances.sort_by { |instance| instance.index }
#Find all the other instances which belong to this same cluster
instances.each do |instance|
     if (current_cluster['azs'].include? instance.az) then
         nodes << instance
     end
end
%>

case $1 in
  start)
    echo "Starting buckytools: $(date) ..."
    pid_guard $PIDFILE $COMPONENT

    (
        {
            exec chpst -v -u vcap:vcap \
                /var/vcap/jobs/go-carbon/packages/buckytools/bin/buckyd<% if p("buckytools.sparse") == true %> -sparse<% end %> \
                -node <%= spec.address %> \
                -bind <%= p("buckytools.address") %>:<%= p("buckytools.port") %> \
                -hash <% case lb when "jump_fnv1a_ch" %>jump_fnv1a<% when "carbon" %>carbon<% end %> \
                -prefix /var/vcap/store/go-carbon/whisper/ \
                -replicas <%= replication %> \
                <% nodes.each_with_index do |node, i| %><%= node.address %>:<%= cluster_name %>-<%= node.index %> <% end %>
        } >>${LOG_DIR}.stdout.log \
        2>>${LOG_DIR}.stderr.log
    ) &
    echo $! > $PIDFILE
    echo "$(<${PIDFILE}). Done"

    ;;
  stop)
    echo "Stopping buckytools $(date) ..."
    kill_and_wait $PIDFILE
    ;;
  *)
    echo "Usage: buckytools_ctl {start|stop}"
    ;;
esac

exit 0
