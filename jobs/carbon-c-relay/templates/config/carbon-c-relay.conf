# comments are allowed in any place and start with a hash (#)

# Top relay to split the load between the go-carbons
# 
<% 
link = link('go-carbon')
clusters = p("carbon-c-relay.clusters")
%>

<% clusters.each do |cluster|
    cluster_name = cluster['name']
    cluster_lb = cluster['lb']
    cluster_replication = cluster['replication']
    cluster_azs = (if cluster.has_key? "azs" then cluster['azs']  else Array.new end)
%>

#
cluster <%= cluster_name %>
  <%= cluster_lb %> replication <%= cluster_replication %>

  # Select the instances that belong to this cluster based on their index.
  <% instances = link.instances.select{|instance| cluster_azs.include?(instance.az) } %>
    
    <%- if link.p("go-carbon.tcp.enabled") == true %>
      <%- instances.each do |instance| %>
        <%= instance.address %>:<%= link.p("go-carbon.tcp_listen") %>=<%= "#{cluster_name}-#{instance.index}" %> proto tcp
      <% end -%>
  <% end -%>

    <%- if link.p("go-carbon.udp.enabled") == true %>
      <%- instances.each do |instance| %>
        <%= instance.address %>:<%= link.p("go-carbon.udp.port") %>=<%= "#{cluster_name}-#{instance.index}" %> proto udp
      <% end -%>
  <% end %>
;
<% end %>

# Optional other external clusters defined by the users
<% p('carbon-c-relay.ext_clusters').each do |cluster| %>
cluster <%= cluster["name"] %>
  <%= cluster["lb"] %> <% if cluster["replication"] %>replication <%= cluster["replication"] %><% end %>
  <% cluster["backends"].each do |backend| %>
        <%= backend["host"] %><% if backend["port"] %>:<%= backend["port"] %><% end %><% if backend["instance"] %>=<%= backend["instance"] %><% end %> <% if backend["proto"] %>proto <%= backend["proto"] %><% end %>
  <% end %>
;
<% end %>


# Optional rules to regex and send data to external clusters
<% p('carbon-c-relay.ext_rules').each do |rule| %>
match <%= rule["regex"] %>
  send to <%= rule["dst"] %>
  <% if rule["stop"] %>stop<% end %>
;
<% end %>


# Optional rewrite rules
<% p('carbon-c-relay.rewrite').each do |rule| %>
rewrite <%= rule["regex"] %>
  into <%= rule["into"] %>
;
<% end %>


# Send everything to the backends!
match * 
  send to
<% clusters.each do |cluster|
    cluster_name = cluster['name']
%>
   <%= cluster_name %>
<% end %>
  stop
;
